-- MySQL Script generated by MySQL Workbench
-- Mon Jul 10 12:36:20 2023
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema ecommerce_improved
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema ecommerce_improved
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `ecommerce_improved` DEFAULT CHARACTER SET utf8 ;
USE `ecommerce_improved` ;

-- -----------------------------------------------------
-- Table `ecommerce_improved`.`Cliente`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ecommerce_improved`.`Cliente` (
  `idcliente` INT NOT NULL,
  PRIMARY KEY (`idcliente`),
  UNIQUE INDEX `idcliente_UNIQUE` (`idcliente` ASC) VISIBLE);


-- -----------------------------------------------------
-- Table `ecommerce_improved`.`Pedido`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ecommerce_improved`.`Pedido` (
  `idPedido` INT NOT NULL,
  `Status` VARCHAR(45) NULL,
  `Cliente_idcliente` INT NOT NULL,
  PRIMARY KEY (`idPedido`, `Cliente_idcliente`),
  UNIQUE INDEX `idPedido_UNIQUE` (`idPedido` ASC) VISIBLE,
  INDEX `fk_Pedido_Cliente_idx` (`Cliente_idcliente` ASC) VISIBLE,
  CONSTRAINT `fk_Pedido_Cliente`
    FOREIGN KEY (`Cliente_idcliente`)
    REFERENCES `ecommerce_improved`.`Cliente` (`idcliente`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table `ecommerce_improved`.`Produto`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ecommerce_improved`.`Produto` (
  `idProduto` INT NOT NULL,
  PRIMARY KEY (`idProduto`),
  UNIQUE INDEX `idProduto_UNIQUE` (`idProduto` ASC) VISIBLE);


-- -----------------------------------------------------
-- Table `ecommerce_improved`.`Estoque`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ecommerce_improved`.`Estoque` (
  `idEstoque` INT NOT NULL,
  `Local` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idEstoque`),
  UNIQUE INDEX `idEstoque_UNIQUE` (`idEstoque` ASC) VISIBLE);


-- -----------------------------------------------------
-- Table `ecommerce_improved`.`Em estoque`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ecommerce_improved`.`Em estoque` (
  `Produto_idProduto` INT NOT NULL,
  `Estoque_idEstoque` INT NOT NULL,
  PRIMARY KEY (`Produto_idProduto`, `Estoque_idEstoque`),
  INDEX `fk_Produto_has_Estoque_Estoque1_idx` (`Estoque_idEstoque` ASC) VISIBLE,
  INDEX `fk_Produto_has_Estoque_Produto1_idx` (`Produto_idProduto` ASC) VISIBLE,
  CONSTRAINT `fk_Produto_has_Estoque_Produto1`
    FOREIGN KEY (`Produto_idProduto`)
    REFERENCES `ecommerce_improved`.`Produto` (`idProduto`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Produto_has_Estoque_Estoque1`
    FOREIGN KEY (`Estoque_idEstoque`)
    REFERENCES `ecommerce_improved`.`Estoque` (`idEstoque`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table `ecommerce_improved`.`Pedido_has_Produto`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ecommerce_improved`.`Pedido_has_Produto` (
  `Pedido_idPedido` INT NOT NULL,
  `Pedido_Cliente_idcliente` INT NOT NULL,
  `Produto_idProduto` INT NOT NULL,
  PRIMARY KEY (`Pedido_idPedido`, `Pedido_Cliente_idcliente`, `Produto_idProduto`),
  INDEX `fk_Pedido_has_Produto_Produto1_idx` (`Produto_idProduto` ASC) VISIBLE,
  INDEX `fk_Pedido_has_Produto_Pedido1_idx` (`Pedido_idPedido` ASC, `Pedido_Cliente_idcliente` ASC) VISIBLE,
  CONSTRAINT `fk_Pedido_has_Produto_Pedido1`
    FOREIGN KEY (`Pedido_idPedido` , `Pedido_Cliente_idcliente`)
    REFERENCES `ecommerce_improved`.`Pedido` (`idPedido` , `Cliente_idcliente`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Pedido_has_Produto_Produto1`
    FOREIGN KEY (`Produto_idProduto`)
    REFERENCES `ecommerce_improved`.`Produto` (`idProduto`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table `ecommerce_improved`.`Fornecedor`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ecommerce_improved`.`Fornecedor` (
  `idFornecedor` INT NOT NULL,
  PRIMARY KEY (`idFornecedor`),
  UNIQUE INDEX `idFornecedor_UNIQUE` (`idFornecedor` ASC) VISIBLE);


-- -----------------------------------------------------
-- Table `ecommerce_improved`.`Fornecedor_has_Produto`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ecommerce_improved`.`Fornecedor_has_Produto` (
  `Fornecedor_idFornecedor` INT NOT NULL,
  `Produto_idProduto` INT NOT NULL,
  PRIMARY KEY (`Fornecedor_idFornecedor`, `Produto_idProduto`),
  INDEX `fk_Fornecedor_has_Produto_Produto1_idx` (`Produto_idProduto` ASC) VISIBLE,
  INDEX `fk_Fornecedor_has_Produto_Fornecedor1_idx` (`Fornecedor_idFornecedor` ASC) VISIBLE,
  CONSTRAINT `fk_Fornecedor_has_Produto_Fornecedor1`
    FOREIGN KEY (`Fornecedor_idFornecedor`)
    REFERENCES `ecommerce_improved`.`Fornecedor` (`idFornecedor`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Fornecedor_has_Produto_Produto1`
    FOREIGN KEY (`Produto_idProduto`)
    REFERENCES `ecommerce_improved`.`Produto` (`idProduto`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table `ecommerce_improved`.`Terceiro vendedor`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ecommerce_improved`.`Terceiro vendedor` (
  `idTerceiro vendedor` INT NOT NULL,
  PRIMARY KEY (`idTerceiro vendedor`),
  UNIQUE INDEX `idTerceiro vendedor_UNIQUE` (`idTerceiro vendedor` ASC) VISIBLE);


-- -----------------------------------------------------
-- Table `ecommerce_improved`.`Produto_has_Terceiro vendedor`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ecommerce_improved`.`Produto_has_Terceiro vendedor` (
  `Produto_idProduto` INT NOT NULL,
  `Terceiro vendedor_idTerceiro vendedor` INT NOT NULL,
  PRIMARY KEY (`Produto_idProduto`, `Terceiro vendedor_idTerceiro vendedor`),
  INDEX `fk_Produto_has_Terceiro vendedor_Terceiro vendedor1_idx` (`Terceiro vendedor_idTerceiro vendedor` ASC) VISIBLE,
  INDEX `fk_Produto_has_Terceiro vendedor_Produto1_idx` (`Produto_idProduto` ASC) VISIBLE,
  CONSTRAINT `fk_Produto_has_Terceiro vendedor_Produto1`
    FOREIGN KEY (`Produto_idProduto`)
    REFERENCES `ecommerce_improved`.`Produto` (`idProduto`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Produto_has_Terceiro vendedor_Terceiro vendedor1`
    FOREIGN KEY (`Terceiro vendedor_idTerceiro vendedor`)
    REFERENCES `ecommerce_improved`.`Terceiro vendedor` (`idTerceiro vendedor`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-------------------------------------------------------------------------------------------------------------

--A partir do esquema acima, podemos implementar o seguinte script para adaptar o banco de dados a um ecommerce de vendas de produtos de terceiros:

-- Adicionar campos à tabela Cliente
ALTER TABLE Cliente
ADD COLUMN nome VARCHAR(100) NOT NULL,
ADD COLUMN endereco VARCHAR(200) NOT NULL,
ADD COLUMN email VARCHAR(100) NOT NULL,
ADD COLUMN telefone VARCHAR(20) NOT NULL;

-- Adicionar campos à tabela Pedido
ALTER TABLE Pedido
ADD COLUMN data_pedido DATE NOT NULL,
ADD COLUMN endereco_entrega VARCHAR(200) NOT NULL,
ADD COLUMN metodo_pagamento VARCHAR(50) NOT NULL;

-- Adicionar campos à tabela Produto
ALTER TABLE Produto
ADD COLUMN nome VARCHAR(100) NOT NULL,
ADD COLUMN descricao TEXT NOT NULL,
ADD COLUMN preco DECIMAL(10,2) NOT NULL,
ADD COLUMN quantidade_estoque INT NOT NULL;

-- Adicionar campos à tabela Estoque
ALTER TABLE Estoque
ADD COLUMN localizacao VARCHAR(100) NOT NULL,
ADD COLUMN quantidade_disponivel INT NOT NULL;
MODIFY COLUMN Local VARCHAR(45) NOT NULL DEFAULT 'Depósito';

-- Adicionar campos à tabela Fornecedor
ALTER TABLE Fornecedor
ADD COLUMN nome VARCHAR(100) NOT NULL,
ADD COLUMN endereco VARCHAR(200) NOT NULL,
ADD COLUMN telefone VARCHAR(20) NOT NULL;

-- Criar tabela Categoria
CREATE TABLE IF NOT EXISTS Categoria (
  idCategoria INT NOT NULL AUTO_INCREMENT,
  nome VARCHAR(50) NOT NULL,
  PRIMARY KEY (idCategoria)
);

-- Criar tabela Carrinho de Compras
CREATE TABLE IF NOT EXISTS CarrinhoDeCompras (
  idCarrinho INT NOT NULL AUTO_INCREMENT,
  idCliente INT NOT NULL,
  idProduto INT NOT NULL,
  quantidade INT NOT NULL,
  PRIMARY KEY (idCarrinho),
  FOREIGN KEY (idCliente) REFERENCES Cliente (idcliente) ON DELETE CASCADE ON UPDATE CASCADE,
  FOREIGN KEY (idProduto) REFERENCES Produto (idProduto) ON DELETE CASCADE ON UPDATE CASCADE
);

-- Criar tabela Avaliacao
CREATE TABLE IF NOT EXISTS Avaliacao (
  idAvaliacao INT NOT NULL AUTO_INCREMENT,
  idProduto INT NOT NULL,
  idCliente INT NOT NULL,
  classificacao INT NOT NULL,
  comentario TEXT,
  PRIMARY KEY (idAvaliacao),
  FOREIGN KEY (idProduto) REFERENCES Produto (idProduto) ON DELETE CASCADE ON UPDATE CASCADE,
  FOREIGN KEY (idCliente) REFERENCES Cliente (idcliente) ON DELETE CASCADE ON UPDATE CASCADE
);

-- Modificar tabela Pedido_has_Produto
ALTER TABLE Pedido_has_Produto
ADD COLUMN quantidade INT NOT NULL;

-- Adicionar índices às tabelas
ALTER TABLE Cliente ADD INDEX idx_cliente_nome (nome);
ALTER TABLE Produto ADD INDEX idx_produto_nome (nome);
ALTER TABLE Pedido_has_Produto ADD INDEX idx_pedido_produto (Pedido_idPedido, Pedido_Cliente_idcliente);


---------------------------------------------------------------------------------------------------------
-- Podemos aplicar as queries abaixo para popular o banco de dados com alguns dados de teste:

-- Inserir dados na tabela Cliente
INSERT INTO Cliente (idcliente, nome, endereco, email, telefone)
VALUES
  (1, 'João Silva', 'Rua A, 123', 'joao@example.com', '123456789'),
  (2, 'Maria Santos', 'Avenida B, 456', 'maria@example.com', '987654321'),
  (3, 'Pedro Souza', 'Rua C, 789', 'pedro@example.com', '456123789');

-- Inserir dados na tabela Produto
INSERT INTO Produto (idProduto, nome, descricao, preco, quantidade_estoque)
VALUES
  (1, 'Camiseta', 'Camiseta de algodão', 29.99, 50),
  (2, 'Calça Jeans', 'Calça jeans masculina', 79.99, 30),
  (3, 'Tênis', 'Tênis esportivo', 99.99, 20);

-- Inserir dados na tabela Estoque
INSERT INTO Estoque (idEstoque, localizacao, quantidade_disponivel)
VALUES
  (1, 'Depósito A', 100),
  (2, 'Depósito B', 150);

-- Inserir dados na tabela Fornecedor
INSERT INTO Fornecedor (idFornecedor, nome, endereco, telefone)
VALUES
  (1, 'Fornecedor A', 'Rua X, 123', '111111111'),
  (2, 'Fornecedor B', 'Avenida Y, 456', '222222222');

-- Inserir dados na tabela Categoria
INSERT INTO Categoria (nome)
VALUES
  ('Roupas'),
  ('Calçados');

-- Inserir dados na tabela CarrinhoDeCompras
INSERT INTO CarrinhoDeCompras (idCarrinho, idCliente, idProduto, quantidade)
VALUES
  (1, 1, 1, 2),
  (2, 1, 3, 1),
  (3, 2, 2, 3);

-- Inserir dados na tabela Avaliacao
INSERT INTO Avaliacao (idAvaliacao, idProduto, idCliente, classificacao, comentario)
VALUES
  (1, 1, 1, 4, 'Ótima camiseta!'),
  (2, 2, 2, 5, 'A calça jeans é excelente!'),
  (3, 3, 3, 3, 'O tênis é confortável, mas poderia ter mais opções de cores.');

-- Atualizar quantidade de produtos no estoque
UPDATE Estoque
SET quantidade_disponivel = quantidade_disponivel - (SELECT quantidade FROM CarrinhoDeCompras WHERE CarrinhoDeCompras.idProduto = Estoque_idEstoque);

-- Atualizar quantidade de produtos no Pedido_has_Produto
UPDATE Pedido_has_Produto
SET quantidade = (SELECT quantidade FROM CarrinhoDeCompras WHERE CarrinhoDeCompras.idProduto = Pedido_has_Produto.Produto_idProduto);

-- Exibir informações dos clientes e seus pedidos
SELECT c.idcliente, c.nome, p.idPedido, p.Status
FROM Cliente c
JOIN Pedido p ON c.idcliente = p.Cliente_idcliente;


----------------------------------------------------------------------------------------------------------------

-- Recuperar todos os produtos da tabela Produto
SELECT * FROM Produto;

-- Recuperar nome e preço dos produtos da tabela Produto
SELECT nome, preco FROM Produto;

-- Recuperar clientes com nome "João Silva"
SELECT * FROM Cliente WHERE nome = 'João Silva';

-- Recuperar produtos com preço maior que 50
SELECT * FROM Produto WHERE preco > 50;

-- Recuperar nome do produto e preço com desconto de 10%
SELECT nome, preco * 0.9 AS preco_desconto FROM Produto;

-- Recuperar produtos ordenados por preço em ordem decrescente
SELECT * FROM Produto ORDER BY preco DESC;

-- Recuperar clientes ordenados por nome em ordem alfabética
SELECT * FROM Cliente ORDER BY nome ASC;

-- Recuperar categorias com mais de 3 produtos
SELECT idCategoria, COUNT(*) as total_produtos
FROM Produto
GROUP BY idCategoria
HAVING total_produtos > 3;

-- Recuperar pedidos juntamente com as informações do cliente
SELECT Pedido.idPedido, Pedido.Status, Cliente.nome
FROM Pedido
JOIN Cliente ON Pedido.Cliente_idcliente = Cliente.idcliente;

-- Recuperar produtos juntamente com as informações do fornecedor
SELECT Produto.nome, Fornecedor.nome
FROM Produto
JOIN Fornecedor_has_Produto ON Produto.idProduto = Fornecedor_has_Produto.Produto_idProduto
JOIN Fornecedor ON Fornecedor_has_Produto.Fornecedor_idFornecedor = Fornecedor.idFornecedor;