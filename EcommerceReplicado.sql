-- MySQL Script generated by MySQL Workbench
-- Mon Jul 10 12:36:20 2023
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema ecommerce
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema ecommerce
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `ecommerce` DEFAULT CHARACTER SET utf8 ;
USE `ecommerce` ;

-- -----------------------------------------------------
-- Tabela `ecommerce`.`Cliente`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ecommerce`.`Cliente` (
  `idcliente` INT NOT NULL,
  PRIMARY KEY (`idcliente`),
  UNIQUE INDEX `idcliente_UNIQUE` (`idcliente` ASC) VISIBLE);


-- -----------------------------------------------------
-- Tabela `ecommerce`.`Pedido`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ecommerce`.`Pedido` (
  `idPedido` INT NOT NULL,
  `Status` VARCHAR(45) NULL,
  `Cliente_idcliente` INT NOT NULL,
  PRIMARY KEY (`idPedido`, `Cliente_idcliente`),
  UNIQUE INDEX `idPedido_UNIQUE` (`idPedido` ASC) VISIBLE,
  INDEX `fk_Pedido_Cliente_idx` (`Cliente_idcliente` ASC) VISIBLE,
  CONSTRAINT `fk_Pedido_Cliente`
    FOREIGN KEY (`Cliente_idcliente`)
    REFERENCES `ecommerce`.`Cliente` (`idcliente`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Tabela `ecommerce`.`Produto`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ecommerce`.`Produto` (
  `idProduto` INT NOT NULL,
  PRIMARY KEY (`idProduto`),
  UNIQUE INDEX `idProduto_UNIQUE` (`idProduto` ASC) VISIBLE);


-- -----------------------------------------------------
-- Tabela `ecommerce`.`Estoque`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ecommerce`.`Estoque` (
  `idEstoque` INT NOT NULL,
  `Local` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idEstoque`),
  UNIQUE INDEX `idEstoque_UNIQUE` (`idEstoque` ASC) VISIBLE);


-- -----------------------------------------------------
-- Tabela `ecommerce`.`Em estoque`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ecommerce`.`Em estoque` (
  `Produto_idProduto` INT NOT NULL,
  `Estoque_idEstoque` INT NOT NULL,
  PRIMARY KEY (`Produto_idProduto`, `Estoque_idEstoque`),
  INDEX `fk_Produto_has_Estoque_Estoque1_idx` (`Estoque_idEstoque` ASC) VISIBLE,
  INDEX `fk_Produto_has_Estoque_Produto1_idx` (`Produto_idProduto` ASC) VISIBLE,
  CONSTRAINT `fk_Produto_has_Estoque_Produto1`
    FOREIGN KEY (`Produto_idProduto`)
    REFERENCES `ecommerce`.`Produto` (`idProduto`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Produto_has_Estoque_Estoque1`
    FOREIGN KEY (`Estoque_idEstoque`)
    REFERENCES `ecommerce`.`Estoque` (`idEstoque`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Tabela `ecommerce`.`Pedido_has_Produto`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ecommerce`.`Pedido_has_Produto` (
  `Pedido_idPedido` INT NOT NULL,
  `Pedido_Cliente_idcliente` INT NOT NULL,
  `Produto_idProduto` INT NOT NULL,
  PRIMARY KEY (`Pedido_idPedido`, `Pedido_Cliente_idcliente`, `Produto_idProduto`),
  INDEX `fk_Pedido_has_Produto_Produto1_idx` (`Produto_idProduto` ASC) VISIBLE,
  INDEX `fk_Pedido_has_Produto_Pedido1_idx` (`Pedido_idPedido` ASC, `Pedido_Cliente_idcliente` ASC) VISIBLE,
  CONSTRAINT `fk_Pedido_has_Produto_Pedido1`
    FOREIGN KEY (`Pedido_idPedido` , `Pedido_Cliente_idcliente`)
    REFERENCES `ecommerce`.`Pedido` (`idPedido` , `Cliente_idcliente`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Pedido_has_Produto_Produto1`
    FOREIGN KEY (`Produto_idProduto`)
    REFERENCES `ecommerce`.`Produto` (`idProduto`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Tabela `ecommerce`.`Fornecedor`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ecommerce`.`Fornecedor` (
  `idFornecedor` INT NOT NULL,
  PRIMARY KEY (`idFornecedor`),
  UNIQUE INDEX `idFornecedor_UNIQUE` (`idFornecedor` ASC) VISIBLE);


-- -----------------------------------------------------
-- Tabela `ecommerce`.`Fornecedor_has_Produto`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ecommerce`.`Fornecedor_has_Produto` (
  `Fornecedor_idFornecedor` INT NOT NULL,
  `Produto_idProduto` INT NOT NULL,
  PRIMARY KEY (`Fornecedor_idFornecedor`, `Produto_idProduto`),
  INDEX `fk_Fornecedor_has_Produto_Produto1_idx` (`Produto_idProduto` ASC) VISIBLE,
  INDEX `fk_Fornecedor_has_Produto_Fornecedor1_idx` (`Fornecedor_idFornecedor` ASC) VISIBLE,
  CONSTRAINT `fk_Fornecedor_has_Produto_Fornecedor1`
    FOREIGN KEY (`Fornecedor_idFornecedor`)
    REFERENCES `ecommerce`.`Fornecedor` (`idFornecedor`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Fornecedor_has_Produto_Produto1`
    FOREIGN KEY (`Produto_idProduto`)
    REFERENCES `ecommerce`.`Produto` (`idProduto`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Tabela `ecommerce`.`Terceiro vendedor`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ecommerce`.`Terceiro vendedor` (
  `idTerceiro vendedor` INT NOT NULL,
  PRIMARY KEY (`idTerceiro vendedor`),
  UNIQUE INDEX `idTerceiro vendedor_UNIQUE` (`idTerceiro vendedor` ASC) VISIBLE);


-- -----------------------------------------------------
-- Tabela `ecommerce`.`Produto_has_Terceiro vendedor`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ecommerce`.`Produto_has_Terceiro vendedor` (
  `Produto_idProduto` INT NOT NULL,
  `Terceiro vendedor_idTerceiro vendedor` INT NOT NULL,
  PRIMARY KEY (`Produto_idProduto`, `Terceiro vendedor_idTerceiro vendedor`),
  INDEX `fk_Produto_has_Terceiro vendedor_Terceiro vendedor1_idx` (`Terceiro vendedor_idTerceiro vendedor` ASC) VISIBLE,
  INDEX `fk_Produto_has_Terceiro vendedor_Produto1_idx` (`Produto_idProduto` ASC) VISIBLE,
  CONSTRAINT `fk_Produto_has_Terceiro vendedor_Produto1`
    FOREIGN KEY (`Produto_idProduto`)
    REFERENCES `ecommerce`.`Produto` (`idProduto`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Produto_has_Terceiro vendedor_Terceiro vendedor1`
    FOREIGN KEY (`Terceiro vendedor_idTerceiro vendedor`)
    REFERENCES `ecommerce`.`Terceiro vendedor` (`idTerceiro vendedor`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-------------------------------------------------------------------------------------------------------------------
-- Podemos aplicar as queries abaixo para popular o banco de dados:

-- Inserir dados na tabela Cliente
INSERT INTO `ecommerce`.`Cliente` (`idcliente`)
VALUES (1), (2), (3);

-- Inserir dados na tabela Pedido
INSERT INTO `ecommerce`.`Pedido` (`idPedido`, `Status`, `Cliente_idcliente`)
VALUES (1, 'Pending', 1), (2, 'Shipped', 2), (3, 'Delivered', 3);

-- Inserir dados na tabela Produto
INSERT INTO `ecommerce`.`Produto` (`idProduto`)
VALUES (1), (2), (3);

-- Inserir dados na tabela Estoque
INSERT INTO `ecommerce`.`Estoque` (`idEstoque`, `Local`)
VALUES (1, 'Warehouse A'), (2, 'Warehouse B'), (3, 'Warehouse C');

-- Inserir dados na tabela Em estoque
INSERT INTO `ecommerce`.`Em estoque` (`Produto_idProduto`, `Estoque_idEstoque`)
VALUES (1, 1), (2, 2), (3, 3);

-- Inserir dados na tabela Pedido_has_Produto
INSERT INTO `ecommerce`.`Pedido_has_Produto` (`Pedido_idPedido`, `Pedido_Cliente_idcliente`, `Produto_idProduto`)
VALUES (1, 1, 1), (2, 2, 2), (3, 3, 3);

-- Inserir dados na tabela Fornecedor
INSERT INTO `ecommerce`.`Fornecedor` (`idFornecedor`)
VALUES (1), (2), (3);

-- Inserir dados na tabela Fornecedor_has_Produto
INSERT INTO `ecommerce`.`Fornecedor_has_Produto` (`Fornecedor_idFornecedor`, `Produto_idProduto`)
VALUES (1, 1), (2, 2), (3, 3);

-- Inserir dados na tabela Terceiro vendedor
INSERT INTO `ecommerce`.`Terceiro vendedor` (`idTerceiro vendedor`)
VALUES (1), (2), (3);

-- Inserir dados na tabela Produto_has_Terceiro vendedor
INSERT INTO `ecommerce`.`Produto_has_Terceiro vendedor` (`Produto_idProduto`, `Terceiro vendedor_idTerceiro vendedor`)
VALUES (1, 1), (2, 2), (3, 3);


-------------------------------------------------------------------------------------------------------------------

-- E com as queries abaixo podemos testar as consultas:

-- Recuperar todos os dados da tabela Cliente
SELECT * FROM `ecommerce`.`Cliente`;

-- Recuperar colunas específicas da tabela Pedido
SELECT idPedido, Status FROM `ecommerce`.`Pedido`;

-- Recuperar valores distintos da tabela Produto
SELECT DISTINCT idProduto FROM `ecommerce`.`Produto`;

------------------------------------------------------------------------------------------------------------

-- Recuperar clientes com idcliente maior do que 2
SELECT * FROM `ecommerce`.`Cliente` WHERE idcliente > 2;

-- Recuperar produtos com idProduto entre 1 e 3
SELECT * FROM `ecommerce`.`Produto` WHERE idProduto BETWEEN 1 AND 3;

-- Recuperar pedidos com status "Entregue" de um cliente específico
SELECT * FROM `ecommerce`.`Pedido` WHERE Status = 'Entregue' AND Cliente_idcliente = 1;

--------------------------------------------------------------------------------------------------------------

-- Recuperar produtos com um atributo adicional calculado "preço_com_desconto"
SELECT idProduto, idProduto * 0.9 AS preco_com_desconto FROM `ecommerce`.`Produto`;

-- Recuperar pedidos com um atributo concatenado "informacao_pedido" combinando com idPedido e Status
SELECT idPedido, Status, CONCAT(idPedido, '-', Status) AS order_info FROM `ecommerce`.`Pedido`;

-------------------------------------------------------------------------------------------------------------

-- Recuperar clientes organizando a lista pelo idcliente em ordem ascendente
SELECT * FROM `ecommerce`.`Cliente` ORDER BY idcliente ASC;

-- Recuperar produtos com a lista organizada pelo idProduto em ordem decrescentes
SELECT * FROM `ecommerce`.`Produto` ORDER BY idProduto DESC;

-- Recuperar pedidos com a lista organizada pelo Status em ordem ascendente, e então pelo idPedido em ordem descendente
SELECT * FROM `ecommerce`.`Pedido` ORDER BY Status ASC, idPedido DESC;


---------------------------------------------------------------------------------------------------------------

-- Recuperar produtos que tem pelo menos 5 unidades em estoque
SELECT Produto_idProduto, COUNT(*) AS stock_count FROM `ecommerce`.`Em estoque`
GROUP BY Produto_idProduto HAVING stock_count >= 5;

-- Recuperar pedidos com mais de dois produtos
SELECT Pedido_idPedido, Pedido_Cliente_idcliente, COUNT(*) AS product_count FROM `ecommerce`.`Pedido_has_Produto`
GROUP BY Pedido_idPedido, Pedido_Cliente_idcliente HAVING product_count > 2;


----------------------------------------------------------------------------------------------------------------

-- Recuperar pedidos com as respectivas informações de seus clientes
SELECT p.idPedido, p.Status, c.idcliente, c.Name
FROM `ecommerce`.`Pedido` p
JOIN `ecommerce`.`Cliente` c ON p.Cliente_idcliente = c.idcliente;

-- Recuperar produtos com seus respectivos fornecedores
SELECT p.idProduto, p.Name, f.idFornecedor, f.Name
FROM `ecommerce`.`Produto` p
JOIN `ecommerce`.`Fornecedor_has_Produto` fp ON p.idProduto = fp.Produto_idProduto
JOIN `ecommerce`.`Fornecedor` f ON fp.Fornecedor_idFornecedor = f.idFornecedor;